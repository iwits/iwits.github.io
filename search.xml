<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[20190821复盘]]></title>
    <url>%2F2019%2F08%2F21%2FReview20190821%2F</url>
    <content type="text"><![CDATA[此路不通,请出示令牌 Incorrect Password! No content to display! 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]]></content>
      <tags>
        <tag>复盘</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[20190820复盘]]></title>
    <url>%2F2019%2F08%2F20%2FReview20190820%2F</url>
    <content type="text"><![CDATA[此路不通,请出示令牌 Incorrect Password! No content to display! ]]></content>
      <tags>
        <tag>复盘</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[深入理解ES-Symbol和Symbol属性]]></title>
    <url>%2F2019%2F08%2F18%2FUnderstanding-ECMAScript6-Symbol%2F</url>
    <content type="text"><![CDATA[]]></content>
  </entry>
  <entry>
    <title><![CDATA[深入理解ES-解构:使数据访问更便捷]]></title>
    <url>%2F2019%2F08%2F18%2FUnderstanding-ECMAScript6-destructuring-assignment%2F</url>
    <content type="text"><![CDATA[深入理解ES6-解构皮:使数据访问更便捷 解构赋值由对象字面量和数组字面量语法组成,可以用它来简化操作Javascript对象和数组的过程,从数据结构中抽取其中一部分感兴趣的信息 在对象和数组解构中,都可以对值为undefined的对象属性或数组元素设置默认值,且赋值表达式右值不可以为null或undefined,否则程序会抛出错误. 使用var\const\let来解构声明变量,必须要初始化. 可以使用解构赋值代替其他赋值语句,将对象属性和已有的变量解构成更小的数据 当定义函数参数时,用解构参数options对象可以将你真正感兴趣的数据于其他命名参数列在一起. 过去,现在,将来,一代又一代,直到时间的消失 为什么会使用解构?原因如下: 经常需要从对象和数组中获取局部信息 之前的语法进行1中描述的操作时,必须要深入挖掘整个数据解构才能找到所需的数据 综上,解构作为一种优化功能出现,为了现实的解决上述问题. 对象解构对象解构的语法对象解构的语法形式时一个赋值操作符左边防止一个对象字面量 基本赋值(声明赋值)123456789let node = { value: 20, name: 'Nick' }let {value, name} = node;console.log(value); // 20console.log(name); //'Nick' 使用var\let\const 解构声明变量的时候,必须要提供初始化程序(aka.等号右侧的值).否则就会出现语法错误. 解构赋值基本赋值里面讲诉的时对象解构在变量声明中的应用,我们同样可以在变量赋值的时候使用解构语法. 不过需要注意的是,{}作为代码块语法不能出现赋值等号的左边.我们需要使用() 将整个语句转化为一个表达式,从而完成整个解构赋值的过程. 12345678910111213let node = { value: 20, name: 'Nick' }value = 30;name = 'Jack';//使用解构语法为多个变量赋值({value, name} = node);console.log(value); // 20console.log(name); //'Nick' 解构赋值表达式(也就是=右侧的表达式)如果为null 或者undefined会导致程序抛出错误,也就是说,任何尝试读取null或undefined的属性的行为都会出发运行时错误. 无声明赋值既然由声明赋值就会由无声明,一个变量而可以独立于其声明进行解构赋值. 这是使用小括号原因同上. 12var a, b;({a, b}) = {a: 1, b: 2}); 默认值我们都知道=右边有不存在属性时会报错,为了避免报错,增加了默认值语法. 当指定的属性不存在时, 可以随意顶一个一个默认值,在属性名称后添加一个=和对应的默认值即可. 12345678910let node = { value: 20, name: 'Nick' }let {value, name, type = true} = node;console.log(value); // 20console.log(name); //'Nick'console.log(type); // true 为非同名局部变量赋值前面的例子均为同名变量,其实不同名变量也是支持的. 12345678910let node = { value: 20, name: 'Nick' }let {value: localValue, name: localName, type: localType= true} = node;console.log(localValue); // 20console.log(localName); //'Nick'console.log(localType); // true 嵌套对象解构12345678910111213141516171819let node = { type: "identifier", name: "foo", loc: { start: { line: 1, column: 1 }, end: { line: 1, column: 1 } }};let {loc: { start: localStart }} = node;console.log(localStart.line); // 1cobsole.log(localStart.column); //1 在使嵌套解构功能的时候,内空{}时合法的,然而这语句是什么都不会做. 123> //警示自己不要写这样的代码> let { loc: {}} = node;> 数组解构数组解构使用的是数组字面量 ,且解构操作全部都在数组内完成. 数组解构语法在数组解构语法中,我们通过值在数组中的位置进行选取,且可以将其存储在任意变量中,未显式声明的元素都会被直接忽略.在这个过程中,数组本身不会u发生任何变化. 基本赋值(声明赋值)12345678let colors = ["red", "green", "blue"];let [firstColor, secondColor] = colors;//支持直接忽略元素只为感兴趣的元素提供变量名let [, , thirdColor] = colors;console.log(firstColor); //"red"console.log(sencondColor); //"green"console.log(thirdColor); //"blue" 使用var\let\const 解构声明变量的时候,必须要提供初始化程序(aka.等号右侧的值).否则就会出现语法错误. 解构赋值数组解构也可以使用在解构赋值,和对象解构赋值的不同之处在于,数组解构不需要使用()包裹表达式. 12345678let colors = ["red", "green", "blue"], firstColor = "balck", secondColor = "purple";//这里不再需要(语法[firstColor, secondColor] = colors;console.log(firstColor); //"red"console.log(sencondColor); //"green" 交换变量这里有种特殊用法, 用来交换两个变量的值 123456let a = 1, b = 2;[a, b] = [b, a];console.log(a); // 2console.log(b); // 1 解构赋值表达式(也就是=右侧的表达式)如果为null 或者undefined会导致程序抛出错误,也就是说,任何尝试读取null或undefined的属性的行为都会出发运行时错误. 默认值12345let colors = ["red"];let [firstColor, secondColor = "blue"] = colors;console.log(firstColor); //"red"console.log(sencondColor); //"blue" 嵌套数组解构123456let colos = ["red", ["green", "lightgreen"], "blue"];let [firstColor, [sendColor]] = colors;console.log(firstColor); //"red"console.log(secondColor); //"green" 不定参数解构数组中可以使用…语法表示不定参数.不定参数也可以用于数组解构之中 12345678let colors = ["red", "green", "blue"];let [firstColor, ...restColors] = colors;console.log(firstColor);//"red"console.log(restColors.length); //2console.log(restColors[0]); //"green"console.log(restColors[1]);//"blue" 需要注意的是,补丁参数必须啊hi是被解构数组的最后一个条目.后面还出现逗号会被程序抛出异常. 复制数组1234let colors = ["red", "green", "blue"];let [...clonedColors] = colors;console.log(clonedColors); //"["red", "green", "blue"]" 混合解构现实中的数据往往是对象于数组的混合机构,因此解构语法也支持这种混合解构. 12345678910111213141516171819202122232425let node = { type: "Identifier", name: "foo", loc: { start: { line: 1, column: 1 }, end:{ line: 1, column; 1 } } range: [0, 3];}let { loc : {start}, range: [startIndex]} = node;console.log(start.line); //1console.log(start.column); //1console.log(startIndex); //0 解构参数 解构可以用在函数参数的传递过程中,这种使用方式更特别.将参数定义为解构参数,则可以更清晰的了解函数预期传入的参数.解构参数需要哦使用对象或数组解构模式代替命名参数. 123456789//第三个参数使用解构语法function(name. value, {secure, path, domain, expires}){ }setCookie("type", "js", { secure: true, expires: 6000}); 必须传值的解构参数解构参数中有个一个奇怪的地方, 在默认情况下,如果调用参数是不提供被解构的参数会导致程序抛出错误. 123456789function(name. value, {secure, path, domain, expires}){ }setCookie("type", "js"); // 错误//所以默认情况下,解构参数是必传参数,如果不是,则需要为他设置默认值function(name. value, {secure, path, domain, expires} = {}){ } 解构参数的默认值我们可以为解构参数设定默认值 12345678function setCookie(name, value, { secure = false, path = "/", domain = "example.com", expires = new Data(Data.now() + 360000000) }){} 但是这种写法先得很复杂,除此之外,如果解构参数是可选的,那么还要为他添加一个空对象作为参数. 因此对于对象类型的解构参数,建议直接为其赋予相同解构的默认参数 123456789101112131415161718192021222324252627282930function setCookie(name, value, { secure = false, path = "/", domain = "example.com", expires = new Data(Data.now() + 360000000) } = { secure = false, path = "/", domain = "example.com", expires = new Data(Data.now() + 360000000) }){}//使用独立对象优化下上面的写法const setCookiedefaults ={ secure = false, path = "/", domain = "example.com", expires = new Data(Data.now() + 360000000) }function setCookie(name, value, { secure = false, path = "/", domain = "example.com", expires = new Data(Data.now() + 360000000) } = setCookieDefaults){} 参考资料 MSDN-解构赋值]]></content>
      <categories>
        <category>前端学习</category>
        <category>ES6</category>
      </categories>
      <tags>
        <tag>Javascript</tag>
        <tag>ES6</tag>
        <tag>读书笔记</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[深入理解ES6-扩展对象的功能性]]></title>
    <url>%2F2019%2F08%2F10%2FUnderstanding-ECMAScript6-Extend-the-functionality-of-an-object%2F</url>
    <content type="text"><![CDATA[ES6为对象新增很多很好用的属性和方法 增加了super引用 清晰定义了自由属性的枚举顺序 过去,现在,将来,一代又一代,直到时间的消失 对象类别 普通对象: 具有JavaScript对象多有的默认内部行为. 特异对象: 具有某些与默认行为不符的内部行为. 标准对象: ECMAScript 6 规范中定义的对象.eg, Array, Date等.标准对象既可以是普通对象,也可以是特异对象. 内建对象:脚本开始执行时存在于Javascript执行环境中的对象,所有标准对象都是内建对象 对象字面量语法扩展属性初始值的简写123456789101112131415//ES5写法function createPerson(name, age){ return { name: name, age: age };}//ES6写法-支持了简写function createPerson(name, age){ return{ name, age };} 对象方法的简写语法123456789101112131415//ES5var person = { name: "person", sayName: function(){ console.log(this.name) }};//ES6var person = { name: "person", sayName(){ console.log(this.name) }}; 两种写法的差别在于,简写的方法可以使用super. 可计算属性名(Computed Property Name)在ES6中支持了在对象字面量中使用可计算的属性名称,其语法于引用对象实例的可计算属性名称相同,也是使用方括号. 123456789101112let lastName = "last name";var suffix = "name";let person = { "first name": "Nick", [LastName]: "Zakas", ["Second" + suffix]: "Nicky",};console.log(person["first name"]); //"Nick"console.log(person["last name"]); //Zakas"console.log(person["Secondname"]); //"Nicky" 新增方法ESCMAScript其中一个设计目标是:不再闯进新的全局函数,也不在Object.prototype上创建新的方法.为了简化某些操作,在Object上新增了一些方法. Object.is()方法 用于比较两个值 和===最大的不同在于, === 认为(+0=== -0, NaN === NaN)的结果是false, 而is()可以弥补全等运算符的不准确运算. is()判定的准则: 如果两个参数的类型相同且具有相同的值,则返回true. Object.assign()方法 是浅拷贝,拷贝的是指针 这个方法接受一个接受对象和任意数量的源对象,最终返回接受对象.同名情况,后覆盖前 Object.assign()方法不能将提供者的访问器属性复制到接收器对象中.访问器属性最终会因为先调用方法变成一个值存储在接收对象中. 重复的对象字面量属性 ES6中,无论是严格模式还是非严格模式,都不再检查重复属性,对于重复属性,取最后一个值. 自有属性枚举顺序原先的对象属性枚举顺序是有引擎厂商定义的.ES6中严格规定了对象的自由属性被枚举时的返回顺序,这会影响到Object.getOwnPropertyNames()方法及Reflect.ownKeys返回属性的方式,Object.assign()方法处理属性的顺序也将随之改变. 自有属性的枚举顺序为 所有数字键按升序排序 所有字符串键按照他们被加入对象的顺序排序 所有symbol键按照他们被加入对象的顺序排序 虽然如此但是,for-in, object.keys(), JSON.stringify()方法的顺序未明. 增强对象原型改变对象的原型ES6中增加了Object.setPrototypeOf()方法来改变任意指定对象的原型,它接受两个参数:被改变原型的对象及替代第一个参数原型的对象. 1234567891011121314151617181920let person = { getGreeting(){ return "Hello"; }};let dog = { getGreeting(){ retrun "woof"; }};let friend = object.create(person);console.log(friend.getGreeting()); //"Hello";console.log(friend.getPrototype(friend) === person); //true//原型设置为dogObject.setPrototyeOf(friend. dog);console.log(friend.getGreeting()); //"woof";console.log(friend.getPrototype(friend) === dog); //true 不过这不是操作[[prototype]]的唯一方法. 简化原型访问的Super引用ES6中引入的Super引用,使用它可以简单快捷的访问对象的原型.尤其再重写对象实例的方法中调用与它同名的原型方法. 123456let friend = { getGreeting(){ // return object.getPrototypeOf(this).getGreeting.call(this) return super.getGreeting() + ". hi!"; }}; 需要注意的时,再方法声明中调用super,必须是再使用简写方法的对象中声明,其他写法会导致报错. Super引用不是动态变化的,它总是能指向正确的对象.再多重继承的代码中,这一特性显得十分好用. 正式的方法定义在ES6中,方法正式被定义为一个函数,它将会有一个[[HomeObject]]属性来容纳这个方法丛书的对象. 1234567891011let person = { //是方法 getGreeting(){ return "Hello"; }};//不是方法function shareGreeting(){ return "Hi!"; }; Super的所有引用都是通过[[HomeObject]]属性来确定后续的运行过程.第一步实在[[HomeObject]]属性上调用Object.getPrototypeOf()方法来检索原型的引用.然后搜索原型找到同名的函数,最后设置this绑定并且调用相同的方法.]]></content>
      <categories>
        <category>前端学习</category>
        <category>ES6</category>
      </categories>
      <tags>
        <tag>Javascript</tag>
        <tag>ES6</tag>
        <tag>读书笔记</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[深入理解ES6-函数(2)]]></title>
    <url>%2F2019%2F08%2F04%2FUnderstanding-ECMAScript6-Function-2%2F</url>
    <content type="text"><![CDATA[为了修正很多函数问题,避免基本功能重复编码,ES6大力度的更新的函数特性. 块级函数 箭头函数 尾调用的优化 过去,现在,将来,一代又一代,直到时间的消失 # 块级函数 历史溯源在 ES3和早期的版本中,在代码块中声明一个块级函数严格来说一个错误,但是所有的浏览器仍然支持了这个特性,且每个浏览器对这个特性的支持成都都不同.(推荐的方式是使用函数表达式[不会发生声明提前]). 为了抑制这种相互不兼容的行为,ES5在严格模式中引入了错误提示,挡在代码块内部声明函数是会抛出错误: 123456789"use strict"if(true){ //在ES5中会抛出语法错误 //在ES6中不会,ES6会将其视为一个块级声明,从而可以在定义该函数的代码块内访问和调用它 function doSomething(){ //空函数 }} 在ES6中的调用如下 1234567891011"use strict"if(true){ console.log(typeof doSomething); //"function" //在定义函数的代码块内,块级函数会被提升至顶部,但是if一旦执行结束,dosomething函数将不存在 function doSomething(){ //空函数 } doSomething();}console.log(typeof doSomething); //"undefined" 块级函数的使用场景块级函数与let函数表达式相似,一旦执行过成流出代码块,函数定义立即被移除.二者的区别在于 在该代码块中,块级函数声明会被提升至该块的顶部 使用let定义的函数表达式则不会发生声明提升的情况 所以按需使用这两种写法吧 非严格模式下的块级函数在ES6中, 严格模式与非严格模式下的块级函数略有不同. 在严格模式下,块级函数会被提升至代码块顶部 在非严格模式下,会被提升指外围函数或全局作用于的顶部 箭头函数为什么要有箭头函数?this绑定是javascript程序产生错误的一个常见来源,在函数内很容易对this的值失去控制.箭头函数为了限制this值,减少错误和模糊不清的地方而生. 箭头函数与传统函数的差异ES6中新增了箭头函数这个特性-使用=>定义函数的新语法.但是它和传统的JavaScript函数有些不同.主要表现在: 没有this\super\arguments\new.target绑定. 箭头函数中的这些值由外围最近一层的非箭头函数决定 不能通过new关键字调用. 箭头函数没有[[Construct]]方法,所以不能被用作构造函数,如果通过new关键字调用箭头函数,程序会抛出错误. 没有原型. 由于不能通过new关键字嗲用箭头函数,因而没有构造原型的需求,因此箭头函数不存在prototype这个属性 不可以改变this的绑定. 函数内部的this值不可被改变,在函数的声明周期内始终保持一致. 不支持arguments对象. 箭头函数没有arguments绑定,所以必须通过命名参数和不定参数的形式的去访问函数的参数 不支持重复的命名参数.无论在严格还是非严格模式下,箭头函数都不支持重复的命名参数. 箭头函数同样有name属性,这点与其余函数规则一致. 箭头函数的语法箭头函数的语法有多种形式,主要归纳为函数参数\箭头\函数体三种表达 单一参数,并且只是简单的返回了参数值 1234567let reflect = value => value;//效果相当于let reflect = function(value){ return value;}; 当需要传入两个或两个以上参数的时候 1234567let sum = (num1, num2) => num1 + num2;//效果相当于let sum = function(num1, num2){ return num1 + num2;}; 没有参数的时候 1let getName = () => "Nick"; 函数体包含多个语句,这时候需要显示的返回值 123let sum = (num1, num2) => { return num1 + num2;}; 空函数 1let nothing = () => {}; 箭头函数需要返回一个字面量的时候,把字面量包裹在一个()里面 123456789let getItem = id => ({id: id, name: "temp"});//效果相当于let getItem = function(id){ return { id: id, name: "temp" }}; 创建立即执行函数表达式JavaScript函数中一个流行的使用方式是创建立即执行函数表达式(IIFE),你可以定义一个匿名函数并立即调用,自始自终不保存对该函数的引用.当你想要创建一个与其他程序隔离的作用于时,这种模式非常方便. 12345678let person = functiton(name){ return{ getName: function(){ return name; } };}("nick");console.log(person.getName()); //"nick"; 只要把箭头函数包裹在(),就是使用箭头函数完成相同功能. 需要注意的是,()只包裹箭头函数定义的部分,没有包含(“nick”),这一点与正常函数有所不同,由正常函数定义的立即执行函数表达式既可以用()包裹函数体,也可以额外包裹函数的调用部分. 12345678let person = ((name) => { return{ getName: function(){ return name; } };})("nick");console.log(person.getName()); //"nick"; 箭头函数没有this绑定如果箭头函数被非箭头函数包含,则this绑定的是最近一层非箭头函数的this,否则this的值会被设置成为全局对象.且this的值不能被更改. 123456789let PageHandler = { id: "123456", init: function(){ document.addEventListener("click", event=> this.doSomething(event,type), false); }, dosomething: function(type){ console.log("Handling " + type + "for " + this.id); }}; 箭头函数与数组箭头函数的语法非常简单,非常适合用来处理数组. 1var result = values.sort((a, b) => { a-b}); sort(),map(),reduce()等可以接受回调凹函数的数组方法,都可以通过箭头函数语法简化编码过程. 箭头函数没有arguments绑定箭头函数没有自己的arguments对象,且未来无论函数在哪个上下文中执行,箭头函数使用可以访问外围的arguments对象. 箭头函数的辨识方法使用typeof和instanceof 操作符调用箭头函数与调用其他函数并没有差别.不过我们还是可以同一些技巧将其辨识 出来. 箭头函数使用call(),apply(),bind()这些方法,函数this值不受影响. 什么地方适合用箭头函数包括回到函数在内所有使用匿名表达式的地方都合适用箭头函数来改写. 尾调用什么是尾调用?函数作为另外一个函数的最后一条语句被调用. 尾调用会有什么问题?在ES5中,尾调用和其他函数调用的实现类似: 创建一个新的stack frame,将其推入调用栈来表示函数调用.当出现循环调用的时候,每一个未用完的stack frame 都会被保存在内存中,当调用栈编得过大的时候会带来程序问题. ES6中的尾调用优化ES6中缩减了严格模式下(非严格模式不受影响)尾调用栈的大小,如果满足以下条件,尾调用不再创造新的stack frame,而是清除并重用当前stack frame 尾调用不访问当前stack frame的变量(也就是说函数不是一个闭包) 在函数内部,尾调用是最后一条语句 尾调用的结果作为函数值返回. 如何利用尾调用实际上,尾调用的优化发生在引擎背后,除非尝试优化一个函数,否则无须思考此类问题.递归函数是最重要的应用场景,优化效果显著. 123456789101112131415161718// 无法优化function factorial(n){ if (n]]></content>
      <categories>
        <category>前端学习</category>
        <category>ES6</category>
      </categories>
      <tags>
        <tag>Javascript</tag>
        <tag>ES6</tag>
        <tag>读书笔记</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[读书笔记]]></title>
    <url>%2F2019%2F07%2F28%2FJust_Play_Accounting%2F</url>
    <content type="text"><![CDATA[读书笔记 基本的会计概念 自己记录备用 前言本文仅是个人读书笔记,欢迎批评指正.]]></content>
  </entry>
  <entry>
    <title><![CDATA[深入理解ES6-函数(1)]]></title>
    <url>%2F2019%2F07%2F14%2FUnderstanding-ECMAScript6-Function_1%2F</url>
    <content type="text"><![CDATA[为了修正很多函数问题,避免基本功能重复编码,ES6大力度的更新的函数特性. 函数形参的默认值语法支持 支持无命名参数的处理 增强的Function构造函数 展开运算符 Name 属性 明确函数的多重用途 过去,现在,将来,一代又一代,直到时间的消失 函数形参的默认值众所周知,Js中的函数与其他语言函数最大的不同在于,JS中的函数不介意传递进来参数的类型与个数.实际上,在函数体内通过arguments对象来访问整个参数数组.arguments对象是一个类似数组(但不是的Array的实例),它支持[]语法. ES5模拟默认参数与ES6默认参数在ECMAScript5中模拟默认参数1234function makeRequest(url, timeout, callback){ timeout = timeout || 2000; callback = callback || function() {};} 在这个例子中,timeout与callback为可选参数,未传递的话自动赋予初始值.对于函数的命名参数来说,不显示传值,则其值默认未undefined.在这个例子中,大部分情况是正确的,但是一旦遇到timeoout显示传递0进入时,仍会被条件表达式判定为假值,并强制更改其值为2000. 于是我们不得不增加判断参数类型的写法,以保证逻辑的正确性 1234function makeRequest(url, timeout, callback){ timeout = (typeof timeout !== 'undefined')? timeout : 2000; callback = (typeof callback !== 'undefined')? callback : function() {};} 在ECMAScript6中默认参数在ES6中针对函数形参的默认值给出了简化写法.如果没为参数传入值则为其提供一个初始值(语法与.net的写法类似).不再需要自行增加任何检验值是否缺失的代码.与.net写法不同的时,在已指定默认值的参数后可以继续声明无默认值参数. 123function makeRequest(url, timeout = 2000, callback){} 默认参数值对arguments对象的影响12345678910function mixArgs(first, second){ console.log(first === arguments[0]); console.log(second === arguments[1]); first = 'c'; second = 'd'; console.log(first === arguments[0]); console.log(second === arguments[1]);}mixArgs('a','b'); 在ES5中严格模式与非严格模式下的输出迥异. 1234567891011//非严格模式下,命名参数的变化会同步到arguments对象中truetruetruetrue//严格模式下,命名参数的变化不会同步到arguments对象中truetruefalsefalse 在ES6中,如果一个函数使用了默认参数值,则无论是否显式定义了严格模式,arguments对象的行为都将与ECMAScript5 严格模式下的执行保持一致. 默认参数表达式关于默认参数值,最有趣的特性可能是非原始值传参. 123456789101112let value = 5;function getValue() { return value++;}function add(first, second = getValue()){ return first + second;}console.log(add(1, 1)); //2console.log(add(1)); //6console.log(add(1)); //7 初次解析函数声明时不会调用getValue.只有当真实需要赋予默认参数值(2参数未传递时),才会调用此函数. 注意,当使用函数调用结果作为默认参数值时,如果忘记写().则最终传入的时是函数的引用,而不是函数调用的结果. 正是因为默认参数实在函数调用时求值,所以可以使用先定义的参数作为后定义参数的默认值.此外,只允许引用前面参数的值,即先定义的参数不能访问后定义的参数. 1234567891011function add(first, second = first){ return first + second;}console(add(1)); //2//不被允许的写法function add(first = second, second){ return first + second;}console.log(undefined, 1); //抛出错误 默认参数的临时死区与let声明类似,定义参数时会为每个参数创建一个新的标识符绑定,该绑定在初始化之前不可被引用,如果试图访问则会抛出错误.当调用函数时,会通过传入的值或参数的默认值初始化该参数. 函数参数有自己的作用于与临时死去,其与函数体的作用域时各自福利的,也就是说参数的默认值不可以访问函数体内声明的变量. 处理无命名参数对于函数的参数还可以使用无命名(通过arguments[index])访问的方式. 不定参数 在函数的命名参数钱添加…表明这是一个补丁参数,该参数为一个数组,包含着自他之后传入的所有参数,通过这个数组名即可逐一访问里面的参数. 123456789function pick(object, ...keys){ let result = Object.create(null); for (let i = 0, len = keys.length; i < len; i++){ return[keys[i]] = object[keys[i]]; } return result;} 不定参数keys包含的是object之后传入的所有参数 函数的length属性统计的是函数命名参数的数量,不定参数的加入不会影响length属性的值.length(pick) = 1 不定参数的使用限制 每个函数最多只能声明一个不定参数,并且一定要放在所有参数的末尾. 不定参数不能用于对象字面量setter之中.对象字面量setter的参数有且只能有一个. 不定参数对arguments对象的影响 不定参数的设计初衷是代替JavaScript中的arguments对象.因为种种原因,导致的现状是不定参数与arguments参数同时存在. 如果声明函数时定义了不定参数,则在函数被调用时,arguments对象包含了所有传入函数的参数. 其实无论是否使用了不定参数,arguments对象总是包含所有传入函数的参数. 增强的Function构造函数 Function 构造函数通常被用来动态创建构造函数.这种构造函数接受字符串形式的参数,分别为函数的参数及函数体(以字符串的形式传递). 12var add = new Function("first", "second", "return first + second");console.log(add(1, 1)); //2 ES6 中增强了Function构造函数的功能,支持在擦黄健函数时定义默认参数与不定参数 12345var add = new Function("first", "second = first", "return first + second");console.log(add(1)); // 2var pickFirst = new Function("...args", "return args[0]");cosole.log(pickFirst(1, 2)); //1 展开运算符不定参数可以让你指定多个各自独立的参数,并通过整合后的数组来访问.而展开运算符可以让你指定一个数组,将他们打散后作为各自独立的参数传入函数.Javascript内建的Math.max()方法可以接受任意数量的参数并返回值最大的那一个.但是面对数组,Math.max()无法接受其作为参数.想要获取数组中的最大值.只能遍历或者使用apply方法. 123456789//在ES5中从数组中挑选最大的哪个值let values = [25, 50, 75, 100]console.log(Macth.max.apply(Math, values)); //100//在ES6中的展开运算符可以简化以上写法.方式为在数组前面加入不定参数...符号let values = [25, 75, 50, 125]console.log(Math.max(...values)); //100//这种写法等价于console.log(Math.max(25, 75, 50, 125)); 在使用数组给函数传递参数的过程中,大部分使用apply()方法的场景都可以使用展开运算符做替代方案. name属性如何选择合适的名称 ES6程序中的所有的函数的name属性都有一个合适的值.在接下来的示例中展示了一个函数和一个函数表达式,并打印了各自的name属性: 1234567891011 function doSomething(){ //空函数 }//匿名函数表达式的name对应着被赋值为该匿名函数的变量的名称 var doAnotherThing = function() { // 空函数 } console.log(doSomething.name); // "doSomething" console.log(doAnotherThing.name); //"doAnotherThing" name属性的特殊情况1234567891011121314151617181920var doSomething = function doSomethingElse(){ //empty function}var person = { get firstName (){ return "Nick" }, sayName : function(){ console.log(this.name); }}//函数表达式名称>函数本身被赋值的变量名console.log(doSomething.name); //"doSomethingElse"//取值为对象字面量console.log(person.sayName.name); //"sayName"//getter setter对象有各自的前缀console.log(person.firstName.name); //"get firstName" 12345678var doSomething = function(){ //empty function};//通过bind()函数创建的函数,其名称将带有"bound"前缀console.log(doSomething.bind().name); //"bound doSomething"//通过Function构造函数创建的函数,其名称将是"anonymous"//console.log(new Function().name); //"anonymous" 注意: 函数name属性的值不一定引用同名变量,他只是协助调试用的额外信息,所以不能使用name属性的值来获取对于函数的引用. 明确函数的多重用途ES5及其早期版本中的函数具有多重功能,可以结合new使用,函数内的this值将只想一个新对象,函数最终会返回这个新对象. 12345678function Person(name){ this.name = name;}var person = new Person("Nick");var NotAPerson = person("Nick");console.log(person); //"[Object object]"console.log(NotAPerson); //"undefined",非严格模式下,还会在全局对象中设置一个name属性 JavaScript 函数有两个不同的内部方法:[[call]]和[[Construct]].当使用new关键字调用函数时,执行的时[[Construct]]函数,它负责创建一个通常被称作实例的新对象,然后再执行函数体,将this绑定到实例上;如果不使用new关键字,则执行[[call]]函数, 从而直接支持性代码中的函数体.具有[[Construc]]方法的函数被统称为构造函数. ECMAScript5中判断函数被调用的方法在ES5中,如果想确定一个函数是否通过new关键字被调用(或者说,判断该函数是否做欸构造函数被调用),最流行的方式就是用instanceof,举个例子: 12345678910function Person(name){ if (this instanceof Person){ this.name = name; } else { throw new Error("必须通过new关键字来调用person") }}var person = new Person("Nick");var NotAPerson = Person("Nick"); //抛出错误 在这段代码中,首先检查this的值,看他是否为构造函数的实例,如果时则正常执行,否则抛出错误.由于[[Construct]]方法会创建一个Person的新势力,并将this 绑定到新势力上,通常来讲这样做时正确的,但是这个方法也不完全可靠,因为有一种不宜俩new关键字的方法也可以将this绑定到person实例上. 12345678910function Person(name){ if (this instanceof Perso){ this.name = name; } else { throw new Error("必须通过new关键字来调用person") }}var person = new Person("Nick");var notAPerson = Person.call(person "Michael"); //有效! 调用Person.call()时将变量person传入作为第一个参数,相当于在Person函数里将this设为person实例.对于函数本身,无法却分是通过Person.call(或者时Person.apply())还是new关键字调用得到的Person实例. 元属性(metaproperty) new.target为了解决判断函数是否通过new关键字调用的问题,ECMAScript6引入了new.target这个元属性.元属性是指非对象的属性,其可以提供非对象目标的补充信息(例如new). 当调用函数的[[Construct]]方法时,new.target被赋值为new操作符的目标,通常是新创建对象实例,也就是函数体内this的构造函数; 如果调用[[call]]方法,则new.target的值为undefined. 有了这个元属性,可以通过检查new.target石佛普被定义过来安全地检测一个函数是否通过new关键字调用的,就像这样 12345678910function Person(name){ if (typeof new.target !== "undefined"){ console.log( typeof new.target); //"function" this.name = name; } else { throw new Error("必须通过new关键字来调用person") }}var person = new Person("Nick");var notAPerson = Person.call(person, "Michael"); // 抛出错误 举一反三,可以利用元属性.检查是否被某个特性的构造函数所调用 12345678910111213function Person(name){ if (new.target == Person){ this.name = name; } else { throw new Error("必须通过new关键字来调用person") }}function AnotherPerson(name){ Person.call(this, name);}var person = new Person("Nick");var AnotherPerson = new AnotherPerson("Michael"); // 抛出错误 在函数外使用new.target时一个语法错误]]></content>
      <categories>
        <category>前端学习</category>
        <category>ES6</category>
      </categories>
      <tags>
        <tag>Javascript</tag>
        <tag>ES6</tag>
        <tag>读书笔记</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[深入理解ES6-字符串与正则表达式]]></title>
    <url>%2F2019%2F06%2F29%2FUnderstanding_ECMAScript6_String-and-Regular-expression%2F</url>
    <content type="text"><![CDATA[深入理解ES6-字符串与正则表达式 ES6完全支持了Unicode从而让Javascipt能够合理地处理UTF-16字符. ES6为字符串和正则表达时添加了新的方法 ES6新增了一个重要特性-模板字面量,为JavaScript带来多行字符串的内建支持,并且它支持字符串占位符写法. 过去,现在,将来,一代又一代,直到时间的消失 字符的编码字符集与字符编码 计算机中存储的信息都是使用二进制表示的.将我们熟悉的文字符号以既有的规则(如二进制)表示,这就称之为编码.与其对应的过程称之为解码. 字符集(Charset): 将所有字符汇总起来的集合. 字符编码(Character encoding):是一套规则.使用该规则可以实现自然语言中的一个集合,与其他规则集合(如电脉冲/数字)建立映射关系. 码位(Code Point):全球唯一的标识符,是从0开始的字符 utf-8/utf-16/utf-32早期的计算集使用Ascii码对英文字符进行编码.但是随着计算机的普及发展,使用其他语言的国家为了对自己语言字符进行表达,纷纷推出了自己编码规则(即字符编码).比较典型的有表示简体中的gb2312,表示繁体中文的BIG5. 这种为了适合当地的语言和字符,设计新字符编码规则的做法,在本地使用没有任何问题,但是相 io互访问就会出现乱码现象. 为了解决乱码问题,一个伟大的创想-Unicode诞生了.Unicode是一个字符集,它是基于通用字符集的标准发展而来,所致力的目标位位全世界每一个字符提供全球唯一的标识符,目前已经成为计算机科学领域里的一项业界标准.XML/Java编程语言/现代的操作系统都采用了Unicode字符集.我们常说的utf-8/utf-16/utf-32是针对Unicode字符集的三种字符编码方案. utf-32使用4个字节来表示每一个字符,优点是编码规律(第N个字符一定是从4的N次方个字节开始).但是就空间而言,完全没有效率. Utf-16使用两个字节表示0~65535个字符,65535范围被成为基本多文种平面[BMP, Basic Multilingual Plane])的字符,而对于超出65525范围(辅助平面(supplementary plane))则需要一些特殊的技巧来实现.为此uft-16引入了代理对(surrogate pair),其规定两个16位编码单元表示一个码位. uft-8使用一至四个字节位每个字符编码.是一种针对Unicode的可变长度字符编码(定长码),也是一种前缀码.他可以用来表示Unicode标准中的任何字符,并且其编码的第一个字节仍与ASCII兼容,这使得它逐渐成电子邮件/网页或传输文字的应用中最优先采用的编码.IETF要求所有的互联网协议都必须支持utf-8编码. 这也就是说在utf-16中有两种字符 使用一个编码单元16位表示的BMP字符 使用两个编码单元32位表示的辅助屏幕面字符 值得一提的是,除了多种编码方式,不同操作系统之间的大小字节序也影响着对字节的编码与解码.为了解决这个问题，多字节的Unicode编码方式定义了一个”字节顺序标记(Byte Order Mark)”，它是一个特殊的非打印字符，你可以把它包含在文档的开头来指示你所使用的字节顺序。对于UTF-16，字节顺序标记是U+FEFF。如果收到一个以字节FF FE开头的UTF-16编码的文档，你就能确定它的字节顺序是单向的(one way)的了；如果它以FE FF开头，则可以确定字节顺序反向了。 ES6对utf-16的支持在ES5中,所有的字符串操作都是基于16位编码单元.这时候如果使用对使用了两个编码单元32位表示的字符使用对应的方法,则会导致得到的结果与预期不符合. 12345678let text = "𠮷";console.log(text.length); //2 长度实际位1,但是length位2console.log(/^.$/.test(text)); //false 正则表达式是用来判定单一字符的.因此失效.console.log(text.charAt(0)); //"" 前16位不包含可打印字符console.log(text.charAt(1)); //"" 后16位不包含可答应字符console.log(text.charCodeAt(0)); //55362 charCodeAt()会返回每16个编码单元对应的数值.console.log(text.charCodeAt(1)); //57271 正是因为以上的种种的问题,ES6中强制使用utf-16编码来解决上诉问题,并按照这种字符编码来标准准话字符串操作,在Javascript中增加专门针对代理对的功能. codePointAt()方法ES6新增完全支持UTF-16的codePointAt()方法,这个方法接受的编码单元的位置,而非字符位置作为参数,返回与字符串中给定位置对应的码位,即一个整数值. 123456789let text = "𠮷a";console.log(text.charCodeAt(0)); //55362 console.log(text.charCodeAt(1)); //57271console.log(text.charCodeAt(2)); //97console.log(text.codePointAt(0)); //134071console.log(text.codePointAt(1)); //57271console.log(text.codePointAt(2)); //97 最佳实践:要检测一个字符占用的编码单元数量,最简单的方法是调用字的codePointAt()方法. 12345function is32Bit(c){ return c.codePointAt(0) > oxFFFF;}console.log(is32Bit("𠮷")); //trueconsole.log(is32Bit("a")); //false String.formCodePoint()方法ES6中提供的String.formCodePoint()方法是codePointAt()的反向方法,用于根据制定码位生成一个字符. 1console.log(String.formCodePoint(134071)); normalize()方法Unicode的另一个有趣之处在于,如果我们要对不同字符进行排序或比较操作,会存在一种可能,他们是等效的.所谓的规范等效存在两种情况: 无论从哪个角度来看,两个序列的码位都是没有区别的 两个互相兼容的码位序列看起来不同,但是在特定的条件下可以被互相交换使用.其本质是通过特定的方法把等效标准化. ES6为字符串添加了一个normalize()方法,它可以提供Unicode的标准化形式.这个方法接受一个可选的字符串参数,指明应用以下的Unicode标准化形式. 以标准等价方式分解,然后以标准等价方式重组(‘NFC’), 以标准等价方式分解(‘NFD’) 以兼容等价方式分解(‘NFKC’) 以兼容等价方式分解,然后以标准等价方式重装(‘NFKD’) 最佳实践: 在对比字符串之前一定要先把他们标准化为同一形式.在国际化的开发中应用广泛. 12345678910111213141516171819202122232425262728//对数组中的每一个字符串进行比较let normalize = values.map(function(text){ return text.normalize();});normalize.sort(function(first, second){ if (first < second){ return -1; } else if (first = second){ return 0; } else { return 1; }});//比较原始数组values.sort(function(first, second){ let firstNormalized = first.normalize(), secondNormalized = second.normalize(); if(firstNormalized < secondNormalized){ return -1; } else if (firstNormalized = secondNormalized){ return 0; } else { return 1; }}); 正则表达式u修饰符正则表达式是应用非常广泛,有很多好用的在线正则表达式网站.正则表达式默认将字符串的每一个字符按照16位编码单元处理.当遇到32位编码单元时就就出现错误.为了解决这个问题,ES6中引入了正则表达式u修饰符. 当一个正则表达式添加了u修饰符,他就会从编码操作模式切换为字符模式,如此一来正则表达式就不会视代理对为两个字符,从而完全按照预期正常运行. 1234let text = "𠮷";console.log(text.length); //2console.log(/^.$/.test(text)); //false /^.$/表示匹配所有但字符字符串,没有用U时会匹配编码单元.使用u时会切换到匹配字符模式console.log(/^.$/u.test(text)); //false 虽然ES6中并没有支持字符串码位数量的检测,但是有了u修饰符之后,可以用正则表达式来解决这个问题. 123456function codePointLength(text){ let result = text.match(/[\s\S]/gu); //[\s\S]保证名匹配到新行 return result ? result.length : 0;}console.log(codePointLength('𠮷bc')); // 3 最佳实践:因为u修饰符时语法层面的变更,尝试在不兼容ES6的JavaScript引擎中使用它会导致语法错误.如果要检测当前引擎是否支持u修饰符,最安全的方式时通过以下这个函数: 1234567891011//代码工作在老式的JavaScript引擎中,那么在使用u修饰符时,切记//要使用RegExp构造函数,这样可以避免发生语法错误,并且可以有选择的//检测和使用u修饰符function hasRegExpU(){ try { var pattern = new RegExp(".", "u"); return true; } catch (ex){ retun false; }} 其他字符串变更字符串中的子串识别之前的版本中我们一直使用indexOf()方法在一段字符串中检测另一端子字符串,他们一直希望能通过更简单的方法来识别字串. ES6 中增加3个类似的方法可以达到相同的效果. includes()方法,如果在字符串中检测到指定文本则返回true,否则返回false startsWith()方法,如果在字符串的起始部分检测到指定文本则返回true,否则返回false endsWith()方法,如果在字符串的结束部分检测到指定文本则返回true,否则返回false 以上三种方法都支持两个参数(searchText,[startIndex]). 实践注意: 如果需要获得子串在字符串中的实际位置还是得用indexOf()或lastIndexOf() indexOf()或lastIndexOf()的参数中可以传入正则表达式(他们会把正则表达转化为一个字符串并搜索它).但是在以上三个方法中,第一个参数传入正则表达式则会出发一个错误. repeat()方法ES6为字符串增加了repeat()方法,其接受一个number类型的参数,表示该字符串重复的次数,返回值时当前字符串重复一定次数后的新字符串. 1console.log("x".repeat(3)); //xxx 最佳实践,可以用这个方法来控制缩进 12345let indent = " ".repeat(4), indentLevel =0;//当需要增加缩进的时候let newIndent = indent.repeat(++indentLevel); 其他正则表达式语法变更正则表达式y修饰符 y修饰符曾在Firefox中被实现过,现在经ES6标准化后正式成为正则表达式的一个专有扩展.它会影响正则表达式搜索过程中的sticky属性.当在字符串中开始字符匹配时,他会通知搜索从正则表达式的lastIndex属性开始进行,如果在指定位置没能成功匹配,则停止继续匹配. lastIndex属性指明每次搜索开始的位置 g修饰符从这个位置开始向后搜索直到匹配位置 y修饰符同样遵守lastIndex属性,但是要求必须在lastIndex指定的位置发现匹配.实际上y修饰符隐含了头部匹配的标志^.y修饰符的设计本意，就是让头部匹配的标志^在全局匹配中都有效。 当执行操作的时候,y修饰符和g修饰符都会把上一次匹配后面一个字符的索引把偶你在lastIndex中;如果该操作匹配的结果为空,则lastIndex会被重置为0. 1234567891011121314151617181920212223 let text ="hello1 hello2 hello3", pattern = /hello\d\s?/, result = pattern.exec(text), globalPattern = /hello\d\s?/g, globalResult = globalPattern.exex(text), stickyPattern = /hello\d\s?/y, stickyResult = stickyPattern.exec(text);console.log(result[0]); //"Hello1"console.log(globalResult[0]); //"Hello1"console.log(stickyResult[0]); //"Hello1"pattern.lastIndex = 1;globalPattern.lastIndex = 1;stickyPattern.lastIndex = 1;result = pattern.exec(text);globalResult = globalPattern.exex(text);stickyResult = stickyPattern.exec(text);console.log(result[0]); //"Hello1"console.log(globalResult[0]); //"Hello2"console.log(stickyResult[0]); // 抛出错误 使用y修饰符的时候,还需要记住以下几点: sticky 属性时候只读属性,其值由该修饰符的存在性所决定. 只有调用exec()和test()这些正则表达式对象的方法时才会涉及lastIndex属性;调用字符串的方法,例如match(),则不会触发沾滞行为. 1234//单单一个y修饰符对match方法，只能返回第一个匹配，必须与g修饰符联用，才能返回所有匹配。let text = 'a1a2a3';text.match(/a\d/y) // ["a1"]text.match(/a\d/gy) // ["a1", "a2", "a3"] 对于沾滞正则表达式而言,如果使用^字符来匹配字符串开端,指挥从字符串的起始位置或多行模式的首行进行匹配. 若要检测y修饰符是否存在,与检测其他正则表达式修饰符类似,可以通过属性名来检测.sticky属性表示是否设置了y修饰符 1234567891011121314//检查sticky属性的存在性let pattern = /hello\d/y;console.log(pattern.sticky); //如果Javasc引擎支持沾滞修饰符,则sticky的属性为true.//检查JavaScript引擎对y修饰符的支持,不支持则会报错.在老浏览器里面运行一定要记得增加判断function hasRegExpY{ try{ var pattern = new RegExp(",", "y"); return true; } catch (ex){ return false; }} g修饰符会忽略非法字符,y修饰符不会,这样容易发现错误. 正则表达式的复制在ES5中可以通过给RegExp构造函数传递正则表达式作为参数来符之这个正则表达式 12345678910var rel1 = /ab/i, rel2 = new RegExp(rel1); //在ES5中,此时rel2只是rel1的一份拷贝.但如果给RegExp构造函数提供第二个参数,为正则表达式指定一个修饰符,则代码无法运行. //ES5中报错,ES6中正常运行 rel3 = new RegExp(rel1, "g"); //在ES6 中 console.log(rel1.tostring());// "/ab/i" console.log(rel2.tostring());// "/ab/i" console.log(rel3.tostring());// "/ab/g" flags属性在ES5中如果想获取正则表达式的文本,可以通过source属性,但是如果想获取使用的修饰符,就需要tostring()来获取输出的文本. 12345678function getFlags(re){ var text = re.tostring(); return text.substring(text.lastIndexOf("/") + 1, text.length);}//tostring()返回值为"/ab/g"var re = /ab/gconsole.log(getFlags(re)); 为了简化这一过程,ES6中使用了flags属性,它与source属性都是制度的原型属性访问器.对其之定义了getter方法,这极大的简化了调试和编写继承代码的复杂度.ES6的版本中,访问flags属性会返回所有应用在当前正则表达式的修饰符字符串. 1234let re = /ab/g;console.log(re.source); //"ab"console.log(re.flags); //"g" 模板字面量 模板字面量(前称模板字符串)是允许嵌入表达式的字符串字面量.可以使用多行字符串和字符串插值功能. ES6模板字面量语法支持创建领域专用语言(DSL,通指为某些具体且头衔的目标设计的语言).它比ES5及早期版本中的解决方案更安全. ES6模板字面量这个扩展方案是扩展ECMAScript基础语法的语法糖,其提供一套生成/查询并操作其他自然语言里内容的DSL,并且可以免受注入攻击.例如, XSS, SQL注入等等. 实际上ES5中的方案缺少许多特性,为ES6通过模板字面量的方式进行了填补: 多行字符串 一个正式的多行字符串的概念 基本的字符串格式化 将变量的值嵌入字符串的能力 HTML转义 向HTML插入经过安全转换后的字符串的能力. 基础语法 使用反撇号(`)替代了单/双引号.在不包含占位的情况下和普通字符串无差别. 123456\\在模板字符串中使用反撇号可以使用\转义符,而不需要转义单双引号.let message = `\`Hello\` world!`;console.log(message); // "`Hello` world!"console.log(typeOf message); // "string"console.log(message.length); //14 模板字面量中可以包含特定语法(${expression})的占位符.占位符中的表达式回合周围文本一起传递给一个默认函数,该函数负责将所有的部分连接起来. 如果一个人模板字符串由表达式开头,则该字符串被称为带标签的模板字符串,该表达式通常是一个函数,他会在模板字符串处理后被调用,在输出最总接过钱,你都可以通过该函数对模板字符串进行操作处理. 多行字符串为了表示多行字符串,ES6之前的版本都是自行插入\n 1234567891011121314151617181920//方法一: 插入\nconsole.log('string line 1\n +string line 2');// "string line 1// string line 2"//方法二 依靠数组或字符串拼接var message = [ "Multiline ", "String"].join('\n')// "Multiline// string"//方法三//或者利用JS语法bug达到同样的目的,不推荐console.log('string line 1\n \string line 2');// "string line 1// string line 2" ES6中使用模板字面量对多行字符串的表达进行优化 123456789101112//换行要小心缩进,缩进会被保留let message = `Multilinestring`;console.log(message); //"Multiline //string"console.log(message,length); // 16//使用缩进之后使用trim()移除缩进的方式let html = ` Title`.trim(); 字符串占位符 字符串占位符功能是模板字面量与普通字符串的真正的差别.在一个模板字面量中,你可以把任何合法的JavaScript表达式嵌入到占位符中并将其作为字符串的一部分输出到结果中. 占位符${(expression)},(expression)可以使用任意javascript表达式替换. 1234 let name = "Nick", message = `Hello, ${name}.`;console.log(message); //"hello,Nick." 之后的message会一直保持这个结果. 标签模板 一种更高级的使用: 使用代表签的模板字面量.所谓的标签就是在模板字面量中第一个番茄好前标注的字符串 12//应用于模板字面量"Hello world"的模板标签是tag.let message = tag`Hello world!`; 定义标签标签可以是一个函数,调用时传入加工过的模板字面量各部分数据作为参数,必须结合每个部分来创造结果.第一个参数是一个数组,包含Javascript解释过后的字面量字符串,它之后的所有参数都是每一个占位符的解释值.函数可以返回处理好的字符串,或者它可以返回完全不同的东西,甚至不一定是一个自符串标签函数通常使用不定参数特性来定义占位符,从而简化数据处理的过程.函数名可以替换成任意名字. 123function tag(literals,...substitutions){ //返回一个字符串} 123let count = 10, price = 0.25, message = passthru`${count} items cost $${(count * price).toFixed(2)}.` 为了进一步理解传递给tag函数的参数.如果有一个passthru()函数,那么作为一个模板字面量标签,它会接受三个参数: 首先是一个literals的数组,包含以下元素: 第一个占位符前的空字符串(“”) 第一/二个占位符之间的字符串(“ items cost $”) 第二个占位符后的字符串(“.”) 下一个参数是变量count的解释之,传入参数位10,它也成为substitutions数组里的第一个元素 最后一个参数是(count * price).toFixed(2)的解释值,传入参数位0.25,它是substitions数组里面的第二个参数 需要注意的是,literals里的第一个元素是一个空字符串,这确保了literals[0]总是字符串的始端,就像literals[literals.length -1]总是字符串的结尾一样. substitutionsde shuliang zongbi literals少一个,这也意味着表达式substitutions.length === literals.length -1的结果总为true. 基于以上特性,我们可以通过交替取值literals和substitutions两个数组交织在一起重组字符串. 1234567891011121314151617function passthru(literals,...substitutions){ let result = ""; //根据substitutions的数量来确定循环的执行次数 for (let i = 0; i < substitutions,length; i++){ result += literals[i]; result += substitutions[i]; } //合并最后一个literral result += literals[literals.length - 1]; return result;}let count = 10, price = 0.25, message = passthru`${count} items cost $${(count * price).toFixed(2)}.`;console.log(message); //"10 items cost $0.25." 这里需要特别说明的是substitutions里面包含的值不一定是字符串,如果一个表达式球之后得到一个数值,那么传入的就是这个数值. 在模板字面量中使用原始值模板标签同样可以访问原声字符串信息,也就是说通过模板标签可以访问到字符转义被转换成等价字符前的原声字符串.最简单的例子是使用内建的string.raw()标签: 12345let message1 = `Multiline\nstring`, message2 = String.Raw`Multiline\nstring`;console.log(message1); //"Multiline //line"console.log(message2);//"Multiline\\nstring" literals数组也有额外的属性raw(literals[0]有一个等价的literals.raw[0]),是一个包含每一个字面值的原声等价信息的数组. 12345678910111213function raw(literals,...substitutions){ let result = ""; //根据substitutions的数量来确定循环的执行次数 for (let i = 0; i < substitutions,length; i++){ //使用原生值 result += literals[i].raw[i]; result += substitutions[i]; } //合并最后一个literral result += literals.rawliterals.length - 1]; return result;}]]></content>
      <categories>
        <category>前端学习</category>
        <category>ES6</category>
      </categories>
      <tags>
        <tag>Javascript</tag>
        <tag>ES6</tag>
        <tag>读书笔记</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[深入理解ES6-变量作用域]]></title>
    <url>%2F2019%2F05%2F29%2FUnderstanding_ECMAScript6_Variable_Scope%2F</url>
    <content type="text"><![CDATA[深入理解ES6-变量作用域 最佳实践: 默认使用const,只在确实需要改变变量的值的时候使用let。在需要覆盖全局变量的时候使用var 过去,现在,将来,一代又一代,直到时间的消失 最佳实践 默认使用const,只在确实需要改变变量的值的时候使用let。在需要覆盖全局变量的时候使用var。 var声明及Hoisting机制 使用var关键字来声明变量 无论在哪里声明，都会被当成在当前作用域顶部声明的变量 声明提前，初始化操作依旧留在原处执行 块级声明 块级作用域（又称词法作用域），用于声明在指定块的作用域之外无法访问的变量。存在于： 函数内部 块（{}）中 使用let关键字声明块级元素，将变量的作用域限制在当前代码块中 let声明不会提前，因此通常把let声明语句在封闭代码块的顶部 假设当前作用域已存在某个标识符（无论是全局或函数作用域），再次使用块级标识符声明会抛出错误。 const也是块级标识符 块级作用标识符特点是声明不会hoisting，一旦执行到块外就被销毁。 禁止重声明 同一作用域中不能用let重复定义已经存在的标识符。但是如果当前作用域内嵌另一作用域，则可以在内嵌的作用域中使用let声明同名变量。 1234567891011121314//例子1var count = 20;//下面语句会抛出错误let count =40;//例子2var count = 20;if (conditon){ //不会抛出错误，内部作用域的count会屏蔽全局作用域的count let count = 40; Alert(count); //40}Alert(count); //20 const声明 和其他语言一样，const声明的是常量，一旦被设定之后不可修改，每个使用const定义的常量必须进行初始化。一旦不初始化，则会抛出错误。 const和let都是块级作用标识符 假设当前作用域已存在某个标识符（无论是全局或函数作用域），再次使用块级标识符声明会抛出错误。 无论在严格模式还是非严格模式下，都不可以为const定义的常量再赋值。一旦赋值就会抛出错误。 123456789//不能重声明， 被let声明过的不能用const声明var count = 20;let age = 10;const price = 100;//以下语句都会抛出错误const count = 40;const age = 12;let price = 200; const声明不允许修改绑定，但是允许修改值。 1234567891011const person = { name: "Nick"};//可以修改值person.name = "Greg";//不可以修改绑定person = { name: "Greg"}; 临界死区（Temporal Dead Zone） 由于声明不会被提前，在作用域外访问变量会抛出错误。即使是相对安全的typeof. Javascript引擎在扫描代码发现变量声明时，要么将它们提升至作用域顶部（var），要么将声明放到TDZ中（let、const）。访问TDZ中的变量会触发运行时错误。只有执行过变量声明语句后，变量才会从TDZ中移出，然后方可访问。 12345console.log(typeof value); // undefinedif (condition) { console.log(typeof value); //引用错误 let value = "blue";}; 循环中的块级作用域绑定 块级作用域最经典的应用场景就是在循环中，将计数器变量使用块级声明。保证一旦循环结束，，其他地方不可以访问计数器。 循环中的函数 var声明因为变量共享的问题，使得在循环中创建函数非常困难 123456789101112var funcs = [];//var声明的i被共享存储在funcs里面。执行下面操作会输出10个10for (var i = 0; i < 10; i++){ funcs.push(function(){ console.log(i); });}funcs.forEach(function(func){ func(); }); IIFE解决了这个问题，它的思路是通过强制生成计数器变量的副本，规避共享变量。 1234567891011121314var funcs = [];//每次接收到i都创建一个新的副本并存储为value foreach循环调用的时候就会输出0到9for (var i = 0; i < 10; i++){ funcs.push((function(value){ return function() { console.log(value); } }(i)));}funcs.forEach(function(func){ func(); }); ES6支持了块级声明之后，可以使用块级声明达到同样的效果。这是因为块级标识符利用了块级标识符一旦离开了作用域会自动销毁的特性。使用块级标识符声明声明计数器变量，每次循环中都会创建一个新的变量，并以之前循环中同名变量的值将其初始化。【aka.自动副本】 对于for 循环，let和const两种块级标识符是有差别的。 1234567891011121314151617181920212223242526// **********方案一**************** var funcs = []; for (let i = 0; i < 10; i++){ funcs.push(function(){ console.log(i); }); } funcs.forEach(function(func){ func(); }); // **********方案二**************** var funcs = []; //完成一次循环之后，会抛出报错。因为i被定义为常量，i++中尝试修改i的绑定，抛出错误 for (const i = 0; i < 10; i++){ funcs.push(function(){ console.log(i); }); } funcs.forEach(function(func){ func(); }); 对于for-in或者for-of循环，只要循环中不涉及对计数器变量绑定的修改，表现就是无差异。每次循环都会创建一个新的key绑定，因此每个函数都有一个变量key的副本。于是不同的函数输出不同的值。正是因为每次都会创建一个新的绑定。在不修改计数器变量的请况下。const声明也不会抛出错误。 12345678910111213141516171819202122232425262728293031323334//**************let********* var funcs = [], object = { a: true, b: true, c: true }; for (let key in object){ funcs.push(function(){ console.log(key); }); } funcs.forEach(function(func){ func(); }); //************const*********qvar funcs = [], object = { a: true, b: true, c: true };for (const key in object){ funcs.push(function(){ console.log(key); });}funcs.forEach(function(func){ func(); }); 全局块作用域绑定 块级标识符和var声明另一个很大的区别，在于他们在全局作用域中的行为。 当var被作用域全局作用域的时候，他会创建一个新的全局变量作为全局对象[我们所说的全局对象是window对象]的属性。这意味着var可能会覆盖一个已经存在的全局属性。 在全局作用域下使用块级标识符，则是会在全局作用域下创建一个新的绑定，该绑定不会成为全局对象的一个属性。换句话说，块级作用域不能覆盖全局变量，只能遮蔽它。 如果不想对全局对象创建属性，则使用let和const 要安全。如果希望在全局对象下定义变量，仍然可以使用var。这种情况创建于在浏览器中跨frame或者跨window访问代码。]]></content>
      <categories>
        <category>前端学习</category>
        <category>ES6</category>
      </categories>
      <tags>
        <tag>Javascript</tag>
        <tag>ES6</tag>
        <tag>读书笔记</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Hexo + GitHub Pages搭建博客教程(附带踩坑+攻略)]]></title>
    <url>%2F2019%2F05%2F04%2FHexo_GitHub_Pages_Build_blog%2F</url>
    <content type="text"><![CDATA[仅以此文记录我自己搭建hexo博客的过程以及踩到的坑. 本地操作系统为为Win10. 使用的hexo版本为3.0后的版本(NexT对其支持较好,2.0+版本未实验) 托管位置:github 过去,现在,将来,一代又一代,直到时间的消失 什么是Hexo? Hexo 是一个快速、简洁且高效的博客框架。Hexo 使用 Markdown（或其他渲染引擎）解析文章，在几秒内，即可利用靓丽的主题生成静态网页。 选择Hexo的理由很简单. 支持 GitHub Flavored Markdown 的所有功能，甚至可以整合 Octopress 的大多数插件 支持一键部署 有丰富的插件和主题 Node.js 所带来的超快生成速度，让上百个页面在几秒内瞬间完成渲染。 内容物为静态网页,可以轻松的托管再GitHub上,管理和更新方便. 什么是Github Pages? Github是世界上最大的代码存放网站和开源社区.Githubpages功能的推出,让用户有机会自定义项目首页,用来替代默认的源码列表.它是一种被用户编写\托管再Github上面的静态网页. 准备工具 “工欲善其事,必先利其器” 工具类安装 下载安装npm 下载并安装Git 下载并安装Node.js Create a new repository 特别提醒:我已经拥有Github账户.如果你没有,请移步官网注册. 这里一定要把项目名字定义成以下样式. 1{username}.github.io 搭建博客本地环境搭建Hexo 本机新建一个文件夹,如blog 进入该文件夹.鼠标右键选择”Git Bash Here”. 1npm install -g hexo-cli 执行上述步骤成功后,输入 1npm install 生成静态页面,启动本地hexo服务进行本机测试.依次执行以下命令 123hexo cleanhexo ghexo server 打开localhost:4000, 测试安装是否成功.看见页面即为成功. 关联到Github Create a New respository 安装Hexo的Git Deployer插件 1npm install hexo-deployer-git --save 本地生成静态文件 12hexo cleanhexo g 将静态文件推送到Github. 1hexo d SSH Key 使用SSH key避免执行Hexo d部署时频繁的密码输入. 测试是否有已存在的SSH key任意位置打开Git Bash 1cd ~/.ssh 本地生成密钥 如果没有,那么我们在本地生成密钥.输入的邮箱是github注册邮箱. 1ssh-keygen -t rsa -C "your_email@example.com" 根据提示按下三次回车.可以看到以下文字则表示密钥生成成功.(生成的id_rsa.pub文件默认在系统盘个人文件夹下的.ssh文件夹中.) 123 Your identification has been saved in ~/.ssh/id_rsa.Your public key has been saved in ~/.ssh/id_rsa.pub.The key fingerprint is: 设置GitHub项目的deploy Keys,粘贴进去就好了. 测试配置是否成功 1ssh -T git@github.com 出现以下样式的配置则表示成功 12 Hi username! You've successfully authenticated, but GitHub does notprovide shell access. 修改部署协议为SSH 进入blog文件夹,使用记事本类工具打开_config.yml文件,设置deploy属性. 1234 deploy:type: gitrepo: git@github.com:chengjianhua/chengjianhua.github.io.gitbranch: master 设置域名 购买域名(我用的阿里云购买,大家可以根据自己的喜好) 域名备案 设置DNS云解析(域名解析生效需要时间,我直接隔天查看了) 依次进入本地文件夹Blog->source,新建一个文件名为CNAME 执行”cgd”操作将CNAME文件提交到服务器上 123hexo cleanhexo ghexo d 使用网址访问是否正常. Hexo使用指南(Next)Hexo主题设置(Next) 下载主题我使用的是star数量最多的Next主题,你也可以访问主题列表选择自己喜欢的主题. 进入blog页面,Git Bash here输入以下命令以下载next主题.(我是无脑最新,稳定版下载请访问Next官网查找最新稳定版本) 1git clone https://github.com/iissnan/hexo-theme-next themes/next 下载完成之后,会在\bolg\themes中看到next 文件夹. 找到blog底下的_config.yml文件,修改theme 1theme: next 执行“cgd操作” 提交到服务器.如果你想在本地查看,那执行完cg操作之后,使用 1hexo server 启动本地服务,在浏览器中使用localhost:4000查看本地页面. Next 设置语言 实名感谢Hexo支持中文. 修改blog下的_config.yml文件中的language 语言 代码 English en 简体中文 zh-Hans Français fr-FR Português pt 繁體中文(Hk) zh-hk 繁體中文(tw) zh-tw Русский язык ru 日本語 ja Korean ko Next更多使用说明可以查看Next官网.或者期待我的不定期更新的日常 遇到的坑与解决措施SSH 协议设置不生效SSH协议传输设置最开始使用网上的 1234567891011121314 #切入到包含 .git 文件夹的文件夹 cd .deploy/ #查看当前的传输协议 git remote -v origin https://github.com/USERNAME/REPOSITORY.git (fetch) origin https://github.com/USERNAME/REPOSITORY.git (push)#修改 https 协议为 ssh 协议 git remote set-url origin git@github.com:USERNAME/REPOSITORY2.git#或者 git remote add origin git@github.com:username/username.github.io.gi 然而并没有生效,最后使用了上文所述SSH设置方法,才生效.原因未知,google了以下,也有很多人和我一样. localhost正常,部署后自定义域名访问为404或空白 localhost页面正常,然而部署到github之后页面不是空白就是404 查看github上面的文件,发现index.html文件中都是空白,怀疑是提交插件安装有问题.我重装Git Deployer插件后正常.具体猜测是因为第一次装该插件有依赖包版本不正确.回滚数个版本仍异常,干脆卸载重装,重装后正常. Localhost正常,部署后页面没有无主题样式,只有文字. 看了下页面的html文件,主要是加载的script位置不正确.具体的配置跟blog下的_config.yml有关. 修改期中url与root设置后正常.(切记冒号后要有空格,不然编译出错) 12url: https://github.com/iwits/iwits.github.io/root: /]]></content>
      <categories>
        <category>博客搭建</category>
      </categories>
      <tags>
        <tag>hexo</tag>
        <tag>环境搭建</tag>
        <tag>GitHub pages</tag>
        <tag>NextT</tag>
      </tags>
  </entry>
</search>
